#install.packages("shiny")
#install.packages("rlang")
#install.packages('mgcv')
#install.packages('ggplot2')
#install.packages('tidyverse')
library(ggplot2)
library(shiny)
library(rlang)
library(mgcv)
library(tidyverse)
library(readxl)
library(hrbrthemes)
AL <- read_excel("C:/Users/WB571596/OneDrive - WBG/Code/WesternBalkanDashboard/Clean Data/Albania/ALBUnemploymentRate2020.xlsx")
ME <- read_excel("C:/Users/WB571596/OneDrive - WBG/Code/WesternBalkanDashboard/Clean Data/ME/MEUnemploymentRate2020.xlsx")
SR <- read_excel("C:/Users/WB571596/OneDrive - WBG/Code/WesternBalkanDashboard/Clean Data/RS/RSUnemploymentRate2020.xlsx")
MKD <- read_excel("C:/Users/WB571596/OneDrive - WBG/Code/WesternBalkanDashboard/Clean Data/MKD/MKDUnemploymentRate2020.xlsx")
MasterFile <- rbind(ME, SR)
MasterFile <- rbind(MasterFile, AL)
MasterFile <- rbind(MasterFile, MKD)
MasterFile$Year <- as.numeric(MasterFile$Year)
MasterFile$ue_rate <- as.numeric(MasterFile$ue_rate)
MasterFile$ue_rate <- format(as.numeric(MasterFile$ue_rate), digits = 2)
MasterFile$ue_rate <- lapply(MasterFile$ue_rate, format, decimal.mark = ",", digits = 2)
MasterFile$ue_rate <- as.numeric(MasterFile$ue_rate)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Western Balkan Labor Market Dashboard"),
sidebarLayout(sidebarPanel(
sliderInput('Year', 'Year', min=2016, max=max(MasterFile$Year),
value = c(2016,max(MasterFile$Year)), sep = ""),
checkboxGroupInput("show_countries", "Countries to show:",
unique(MasterFile$country), selected = unique(MasterFile$country)),
selectInput('gender', 'Gender', unique(MasterFile$gender)),
selectInput('agegroup', 'Age group', unique(MasterFile$agegroup)),
checkboxInput('label', 'Label', value = TRUE)
),
mainPanel(plotOutput("plot"),
DT::dataTableOutput("dataTable"))
))
#Define server logic required to draw a histogram ----
server <- function(input, output) {
dataset <- reactive({MasterFile %>% filter(country %in% input$show_countries &
Year >= input$Year[1] & Year <= input$Year[2] &
agegroup == input$agegroup &
gender == input$gender)
})
output$dataTable <- DT::renderDataTable({
MasterFile %>% filter(country %in% input$show_countries &
Year >= input$Year[1] & Year <= input$Year[2] &
agegroup == input$agegroup &
gender == input$gender)
})
renderTable({
downloads <- dataset
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes(x=as.factor(Year), y=ue_rate, fill = country, label = ue_rate)) +
geom_col(position = 'dodge2')+
scale_fill_manual(values = c("Albania" = "#e41a1c",
"North Macedonia" = "#377eb8",
"Montenegro" = "#4daf4a",
"Republic of Serbia" = "#984ea3",
"Kosovo" = "#ff7f00",
"Bosnia & Herzegovina" = "#ffff33"))+
ylab('Unemployment Rate')+
xlab('Year')+
theme_ipsum()+
theme(
panel.background = element_blank(),
legend.title = element_blank()
)
if (input$label)
p <- p + geom_text(position = position_dodge2(width = 0.9), vjust = -0.5)
print(p)
})
}
WBDashboard <- shinyApp(ui, server)
install.packages("flexdashboard")
library(flexdashboard)
rmarkdown::draft("index.Rmd", template = "flex_dashboard", package = "flexdashboard")
name: "my-website"
output_dir: docs
WBDashboard
WBDashboard
save(WBDashboard, index.html)
save(WBDashboard)
save(WBDashboard, file = "index.html")
save(WBDashboard, file = "index")
save(WBDashboard, file = "index.Rmd")
rmarkdown::draft("index.Rmd", template = "flex_dashboard", package = "flexdashboard")
rmarkdown::draft("index.Rmd", template = "flex_dashboard", package = "flexdashboard")
---
title: "Untitled"
output:
flexdashboard::flex_dashboard:
orientation: columns
vertical_layout: fill
---
```{r setup, include=FALSE}
library(flexdashboard)
```
Column {data-width=650}
-----------------------------------------------------------------------
### Chart A
```{r}
```
Column {data-width=350}
-----------------------------------------------------------------------
### Chart B
```{r}
```
### Chart C
```{r}
```
---
title: "ggplot2 Diamonds Explorer"
output:
flexdashboard::flex_dashboard:
orientation: columns
social: menu
source_code: embed
runtime: shiny
---
```{r global, include=FALSE}
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(ggplot2)
library(mgcv)
dataset <- diamonds
```
Inputs {.sidebar}
-----------------------------------------------------------------------
```{r}
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0)
checkboxInput('jitter', 'Jitter', value = TRUE)
checkboxInput('smooth', 'Smooth', value = TRUE)
selectInput('x', 'X', names(dataset))
selectInput('y', 'Y', names(dataset), names(dataset)[[2]])
selectInput('color', 'Color', c('None', names(dataset)))
selectInput('facet_row', 'Facet Row',
c(None='.', names(diamonds[sapply(diamonds, is.factor)])))
selectInput('facet_col', 'Facet Column',
c(None='.', names(diamonds[sapply(diamonds, is.factor)])))
```
Outputs
-----------------------------------------------------------------------
### Diamonds
```{r}
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
})
```
install.packages("Rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
---
title: "ggplot2 Diamonds Explorer"
output:
flexdashboard::flex_dashboard:
orientation: columns
social: menu
source_code: embed
runtime: shiny
---
```{r global, include=FALSE}
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(ggplot2)
library(mgcv)
dataset <- diamonds
```
Inputs {.sidebar}
-----------------------------------------------------------------------
```{r}
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0)
checkboxInput('jitter', 'Jitter', value = TRUE)
checkboxInput('smooth', 'Smooth', value = TRUE)
selectInput('x', 'X', names(dataset))
selectInput('y', 'Y', names(dataset), names(dataset)[[2]])
selectInput('color', 'Color', c('None', names(dataset)))
selectInput('facet_row', 'Facet Row',
c(None='.', names(diamonds[sapply(diamonds, is.factor)])))
selectInput('facet_col', 'Facet Column',
c(None='.', names(diamonds[sapply(diamonds, is.factor)])))
```
Outputs
-----------------------------------------------------------------------
### Diamonds
```{r}
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
})
```
rmarkdown::draft("index.Rmd", template = "flex_dashboard", package = "flexdashboard")
ibrary(rmarkdown)
library(rmarkdown)
uninstall.packages(c("digest", "rmarkdown"))
remove.packages(c("digest", "rmarkdown"))
install.packages(c("rmarkdown","digest")
install.packages(c("rmarkdown","digest"))
install.packages(c("rmarkdown","digest"))
install.packages(c("rmarkdown", "digest"))
library(rmarkdown)
library(digest)
library(ggplot2)
library(shiny)
library(rlang)
library(mgcv)
library(tidyverse)
library(readxl)
library(hrbrthemes)
#install.packages("flexdashboard")
library(flexdashboard)
library(rmarkdown)
library(rmarkdown)
library(digest)
AL <- read_excel("C:/Users/WB571596/OneDrive - WBG/Code/WesternBalkanDashboard/Clean Data/Albania/ALBUnemploymentRate2020.xlsx")
ME <- read_excel("C:/Users/WB571596/OneDrive - WBG/Code/WesternBalkanDashboard/Clean Data/ME/MEUnemploymentRate2020.xlsx")
SR <- read_excel("C:/Users/WB571596/OneDrive - WBG/Code/WesternBalkanDashboard/Clean Data/RS/RSUnemploymentRate2020.xlsx")
MKD <- read_excel("C:/Users/WB571596/OneDrive - WBG/Code/WesternBalkanDashboard/Clean Data/MKD/MKDUnemploymentRate2020.xlsx")
MasterFile <- rbind(ME, SR)
MasterFile <- rbind(MasterFile, AL)
MasterFile <- rbind(MasterFile, MKD)
MasterFile$Year <- as.numeric(MasterFile$Year)
MasterFile$ue_rate <- as.numeric(MasterFile$ue_rate)
MasterFile$ue_rate <- format(as.numeric(MasterFile$ue_rate), digits = 2)
MasterFile$ue_rate <- lapply(MasterFile$ue_rate, format, decimal.mark = ",", digits = 2)
MasterFile$ue_rate <- as.numeric(MasterFile$ue_rate)
#install.packages("flexdashboard")
library(flexdashboard)
git remote add origin https://github.com/CorneliusvonLenthe/WB_Dashboard.git
git branch -M main
git push -u origin main
git init
git add *
git commit -m "init commit"
git remote add origin git@github.com:CorneliusvonLenthe/WB_Dashboard.git
git push -u origin master
#install.packages("shiny")
#install.packages("rlang")
#install.packages('mgcv')
#install.packages('ggplot2')
#install.packages('tidyverse')
install.packages('git')
where git
git where
git remote add origin https://github.com/CorneliusvonLenthe/WB_Dashboard.git
git branch -M main
git push -u origin main
install.packages(c("usethis", "gitcreds", "gh"))
library(gitcreds)
library(gh)
library(usethis)
usethis::create_github_token()
gitcreds::gitcreds_set()
